name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: desktop-ai-search
            asset_name: desktop-ai-search-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: desktop-ai-search.exe
            asset_name: desktop-ai-search-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: desktop-ai-search
            asset_name: desktop-ai-search-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: desktop-ai-search
            asset_name: desktop-ai-search-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr ffmpeg libssl-dev pkg-config

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract ffmpeg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install tesseract

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Install Tauri CLI
      run: cargo install tauri-cli

    - name: Build Tauri app
      run: cargo tauri build --target ${{ matrix.target }}

    - name: Create release archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        if [ -d "target/${{ matrix.target }}/release/bundle/appimage" ]; then
          cp target/${{ matrix.target }}/release/bundle/appimage/*.AppImage release/ || true
        fi
        if [ -d "target/${{ matrix.target }}/release/bundle/deb" ]; then
          cp target/${{ matrix.target }}/release/bundle/deb/*.deb release/ || true
        fi
        if [ -d "target/${{ matrix.target }}/release/bundle/macos" ]; then
          cp -r target/${{ matrix.target }}/release/bundle/macos/*.app release/ || true
        fi
        if [ -d "target/release/bundle/appimage" ]; then
          cp target/release/bundle/appimage/*.AppImage release/ || true
        fi
        if [ -d "target/release/bundle/deb" ]; then
          cp target/release/bundle/deb/*.deb release/ || true
        fi
        if [ -d "target/release/bundle/macos" ]; then
          cp -r target/release/bundle/macos/*.app release/ || true
        fi
        tar -czf ${{ matrix.asset_name }}.tar.gz -C release .

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        if (Test-Path "target/${{ matrix.target }}/release/bundle/msi") {
          Copy-Item target/${{ matrix.target }}/release/bundle/msi/*.msi release/ -ErrorAction SilentlyContinue
        }
        if (Test-Path "target/release/bundle/msi") {
          Copy-Item target/release/bundle/msi/*.msi release/ -ErrorAction SilentlyContinue
        }
        Compress-Archive -Path release/* -DestinationPath ${{ matrix.asset_name }}.zip

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.tar.gz
          ${{ matrix.asset_name }}.zip
        retention-days: 5

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Extract version
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # Desktop AI Search ${{ steps.extract_version.outputs.VERSION }}
        
        ## What's New
        
        - New features and improvements
        - Bug fixes and performance optimizations
        - Updated dependencies
        
        ## Installation
        
        ### Linux
        - Download the AppImage file for your architecture
        - Make it executable: \`chmod +x desktop-ai-search-linux-amd64.AppImage\`
        - Run: \`./desktop-ai-search-linux-amd64.AppImage\`
        
        ### macOS
        - Download the DMG file for your architecture
        - Open and drag to Applications folder
        - Run from Applications
        
        ### Windows
        - Download the MSI installer
        - Run the installer as administrator
        - Launch from Start Menu
        
        ## System Requirements
        
        - **RAM**: 8GB+ recommended
        - **Storage**: 2GB+ free space
        - **OS**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)
        
        ## Documentation
        
        - [Complete Documentation](https://github.com/your-username/desktop-ai-search/blob/main/docs/README.md)
        - [API Reference](https://github.com/your-username/desktop-ai-search/blob/main/docs/api.md)
        - [Troubleshooting](https://github.com/your-username/desktop-ai-search/blob/main/docs/README.md#troubleshooting)
        
        ## Support
        
        - [GitHub Issues](https://github.com/your-username/desktop-ai-search/issues)
        - [Discussions](https://github.com/your-username/desktop-ai-search/discussions)
        
        **Full Changelog**: https://github.com/your-username/desktop-ai-search/compare/v${{ steps.extract_version.outputs.VERSION_NUMBER }}...HEAD
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Desktop AI Search ${{ steps.extract_version.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          desktop-ai-search-linux-amd64/*
          desktop-ai-search-windows-amd64.exe/*
          desktop-ai-search-macos-amd64/*
          desktop-ai-search-macos-arm64/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.extract_version.outputs.VERSION_NUMBER }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=Desktop AI Search
          org.opencontainers.image.description=AI-powered local file search
          org.opencontainers.image.version=${{ steps.extract_version.outputs.VERSION_NUMBER }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    if: always()
    steps:
    - name: Extract version
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.create-release.result == 'success' && needs.docker-release.result == 'success'
      run: |
        echo "✅ Release ${{ steps.extract_version.outputs.VERSION }} created successfully!"
        echo "🐳 Docker image pushed to ghcr.io"
        echo "📦 Release assets uploaded to GitHub"

    - name: Notify failure
      if: needs.create-release.result == 'failure' || needs.docker-release.result == 'failure'
      run: |
        echo "❌ Release ${{ steps.extract_version.outputs.VERSION }} failed!"
        echo "Create Release: ${{ needs.create-release.result }}"
        echo "Docker Release: ${{ needs.docker-release.result }}"
        exit 1